<?xml version="1.0" encoding="UTF-8"?> <!-- Cabecera genérica -->

    <configuration>
        <!-- Definimos el primer bloque, Console, en el cual especificamos qué aparecerá por consola -->
        <appender name="Console" class="ch.qos.logback.core.ConsoleAppender">

            <!--  Por consola se mostrarán los mensajes por debajo de ERROR, por tanto,
            Error lo desechamos y aceptamos el resto -->
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>ERROR</level>   <!-- Nivel del error -->
                <onMatch>DENY</onMatch> <!-- Acción en caso de coincidencia -->
                <onMismatch>ACCEPT</onMismatch> <!-- Acción en caso de no coincidencia -->
            </filter>

            <encoder>
                <!-- En pattern especificamos el formato de salida del log entry
                 En este caso el pattern es:
                 - fecha
                 - thread
                 - nivel
                 - logger
                 mensaje que escribe-->
                    <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{50} => %msg%n</pattern>
            </encoder>
        </appender>

            <!--  En el fichero backlog.log se escribirán los mensajes de ERROR, por tanto,
           Error se acepta y el resto se desecha -->
        <appender name="FileLog" class="ch.qos.logback.core.FileAppender">

            <file>backlog.log</file>  <!-- Se especifica el fichero donde se va a guardar -->

            <!-- Usamos un fitro para aceptar solo los logs de nivel ERROR y rechazar el resto. -->
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>ERROR</level>   <!-- Nivel del error -->
                <onMatch>ACCEPT</onMatch> <!-- Acción en caso de coincidencia -->
                <onMismatch>DENY</onMismatch> <!-- Acción en caso de no coincidencia -->
            </filter>

            <!-- De nuevo, definimos el patrón de salida del log -->
            <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                 <Pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{50} => %msg%n</Pattern>
            </encoder>
        </appender>

        <!-- Al final definimos el nivel de los logs que se recogerán en el proyecto raíz
            También se puede definir por clases, dándole a cada una un nivel distinto.
            Por comodidad, se define INFO como nivel base, ya que con TRACE tardaría mucho en
            cada ejecución. Sin embargo, esto se puede cambiar fácilmente según los requerimientos -->
        <root level="INFO">
            <!-- Añadimos los appends creados -->
            <appender-ref ref="Console" />
            <appender-ref ref="FileLog" />
        </root>
    </configuration>
